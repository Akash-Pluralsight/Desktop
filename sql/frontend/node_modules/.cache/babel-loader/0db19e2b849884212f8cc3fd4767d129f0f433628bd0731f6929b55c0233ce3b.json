{"ast":null,"code":"var _jsxFileName = \"/Users/akashs-chetiar/Desktop/sql/frontend/src/Components/CreateSchema.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CreateSchema() {\n  _s();\n  const [schemaName, setSchemaName] = useState(\"\");\n  const [validationMessage, setValidationMessage] = useState(\"\");\n  const handleSchemaNameChange = event => {\n    setSchemaName(event.target.value);\n  };\n  const handleCreateSchemaBtn = async () => {\n    const hasBlankSpaces = /\\s+/.test(schemaName);\n    const hasSpecialCharacters = /[^\\w]/.test(schemaName);\n    if (schemaName !== schemaName.toLowerCase()) {\n      setValidationMessage(\"<p style='color: red;'>Schema name should be in lowercase</p>\");\n    } else if (hasBlankSpaces) {\n      setValidationMessage(\"<p style='color: red;'>Schema name should not contain blank spaces</p>\");\n    } else if (hasSpecialCharacters) {\n      setValidationMessage(\"<p style='color: red;'>Schema name should not contain special characters other than underscore</p>\");\n    } else if (schemaName === \"\") {\n      setValidationMessage(\"<p style='color: red;'>Please enter Schema name </p>\");\n    } else {\n      setValidationMessage(\"\");\n      try {\n        const response = await fetch(\"http://localhost:5000/api/createSchema\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            schemaName\n          })\n        });\n        if (response.ok) {\n          setValidationMessage(\"<p style='color: green;'>Schema created successfully</p>\");\n        } else {\n          setValidationMessage(\"<p style='color: red;'>Error creating schema ok </p>\");\n        }\n      } catch (error) {\n        console.error(\"Error:\", error);\n        setValidationMessage(\"<p style='color: red;'>Error creating schema</p>\");\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Enter valid Schema Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter Schema Name\",\n        value: schemaName,\n        onChange: handleSchemaNameChange,\n        className: \"schemaInput\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: validationMessage\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCreateSchemaBtn,\n      className: \"createschemabtn\",\n      children: \"Create Schema\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(CreateSchema, \"QL6kgo20llqCC2cqn6stw46PfvA=\");\n_c = CreateSchema;\nvar _c;\n$RefreshReg$(_c, \"CreateSchema\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","CreateSchema","_s","schemaName","setSchemaName","validationMessage","setValidationMessage","handleSchemaNameChange","event","target","value","handleCreateSchemaBtn","hasBlankSpaces","test","hasSpecialCharacters","toLowerCase","response","fetch","method","headers","body","JSON","stringify","ok","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","className","dangerouslySetInnerHTML","__html","onClick","_c","$RefreshReg$"],"sources":["/Users/akashs-chetiar/Desktop/sql/frontend/src/Components/CreateSchema.jsx"],"sourcesContent":["import React,{useState} from \"react\";\n\nexport default function CreateSchema (){\n    const [schemaName,setSchemaName] = useState(\"\");\n    const [validationMessage, setValidationMessage] = useState(\"\");\n\n    const handleSchemaNameChange=(event)=>{\n        setSchemaName(event.target.value);\n    }\n    const handleCreateSchemaBtn = async () => {\n        const hasBlankSpaces = /\\s+/.test(schemaName);\n        const hasSpecialCharacters = /[^\\w]/.test(schemaName);\n        if(schemaName!==schemaName.toLowerCase()){\n            setValidationMessage(\"<p style='color: red;'>Schema name should be in lowercase</p>\");\n        }\n        else if(hasBlankSpaces){\n            setValidationMessage(\"<p style='color: red;'>Schema name should not contain blank spaces</p>\")\n        }\n        else if (hasSpecialCharacters) {\n            setValidationMessage(\"<p style='color: red;'>Schema name should not contain special characters other than underscore</p>\");\n        }\n        else if(schemaName === \"\"){\n            setValidationMessage(\"<p style='color: red;'>Please enter Schema name </p>\");\n        }\n        else{\n            setValidationMessage(\"\")\n            try {\n                const response = await fetch(\"http://localhost:5000/api/createSchema\", {\n                  method: \"POST\",\n                  headers: {\n                    \"Content-Type\": \"application/json\",\n                  },\n                  body: JSON.stringify({ schemaName }),\n                });\n        \n                if (response.ok) {\n                  setValidationMessage(\"<p style='color: green;'>Schema created successfully</p>\");\n                } else {\n                  setValidationMessage(\"<p style='color: red;'>Error creating schema ok </p>\");\n                }\n            } catch (error) {\n                    console.error(\"Error:\", error);\n                    setValidationMessage(\"<p style='color: red;'>Error creating schema</p>\");\n                }\n        }\n    }\n\n    return(\n        <>\n            <h1>Enter valid Schema Name</h1>\n            <div>\n                <input\n                    type=\"text\"\n                    placeholder=\"Enter Schema Name\"\n                    value={schemaName}\n                    onChange={handleSchemaNameChange}\n                    className=\"schemaInput\"\n                />\n            </div>\n            <div dangerouslySetInnerHTML={{ __html: validationMessage }} />\n            <button onClick={handleCreateSchemaBtn} className=\"createschemabtn\">\n                Create Schema\n            </button>\n        </>\n    )\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAEC,QAAQ,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAErC,eAAe,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACnC,MAAM,CAACC,UAAU,EAACC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC/C,MAAM,CAACS,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE9D,MAAMW,sBAAsB,GAAEC,KAAK,IAAG;IAClCJ,aAAa,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACrC,CAAC;EACD,MAAMC,qBAAqB,GAAG,MAAAA,CAAA,KAAY;IACtC,MAAMC,cAAc,GAAG,KAAK,CAACC,IAAI,CAACV,UAAU,CAAC;IAC7C,MAAMW,oBAAoB,GAAG,OAAO,CAACD,IAAI,CAACV,UAAU,CAAC;IACrD,IAAGA,UAAU,KAAGA,UAAU,CAACY,WAAW,CAAC,CAAC,EAAC;MACrCT,oBAAoB,CAAC,+DAA+D,CAAC;IACzF,CAAC,MACI,IAAGM,cAAc,EAAC;MACnBN,oBAAoB,CAAC,wEAAwE,CAAC;IAClG,CAAC,MACI,IAAIQ,oBAAoB,EAAE;MAC3BR,oBAAoB,CAAC,oGAAoG,CAAC;IAC9H,CAAC,MACI,IAAGH,UAAU,KAAK,EAAE,EAAC;MACtBG,oBAAoB,CAAC,sDAAsD,CAAC;IAChF,CAAC,MACG;MACAA,oBAAoB,CAAC,EAAE,CAAC;MACxB,IAAI;QACA,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAwC,EAAE;UACrEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEnB;UAAW,CAAC;QACrC,CAAC,CAAC;QAEF,IAAIa,QAAQ,CAACO,EAAE,EAAE;UACfjB,oBAAoB,CAAC,0DAA0D,CAAC;QAClF,CAAC,MAAM;UACLA,oBAAoB,CAAC,sDAAsD,CAAC;QAC9E;MACJ,CAAC,CAAC,OAAOkB,KAAK,EAAE;QACRC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;QAC9BlB,oBAAoB,CAAC,kDAAkD,CAAC;MAC5E;IACR;EACJ,CAAC;EAED,oBACIR,OAAA,CAAAE,SAAA;IAAA0B,QAAA,gBACI5B,OAAA;MAAA4B,QAAA,EAAI;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChChC,OAAA;MAAA4B,QAAA,eACI5B,OAAA;QACIiC,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,mBAAmB;QAC/BtB,KAAK,EAAEP,UAAW;QAClB8B,QAAQ,EAAE1B,sBAAuB;QACjC2B,SAAS,EAAC;MAAa;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACNhC,OAAA;MAAKqC,uBAAuB,EAAE;QAAEC,MAAM,EAAE/B;MAAkB;IAAE;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC/DhC,OAAA;MAAQuC,OAAO,EAAE1B,qBAAsB;MAACuB,SAAS,EAAC,iBAAiB;MAAAR,QAAA,EAAC;IAEpE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eACX,CAAC;AAEX;AAAC5B,EAAA,CA/DuBD,YAAY;AAAAqC,EAAA,GAAZrC,YAAY;AAAA,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}